{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar Complex64 = require( '@stdlib/complex-float32' );\n\n\n// MAIN //\n\n/**\n* Revives a JSON-serialized 64-bit complex number.\n*\n* @param {string} key - key\n* @param {*} value - value\n* @returns {(*|Complex64)} value or 64-bit complex number\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n*\n* var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex64 );\n* // returns <Complex64>\n*/\nfunction reviveComplex64( key, value ) {\n\tif (\n\t\tvalue &&\n\t\tvalue.type &&\n\t\tvalue.type === 'Complex64' &&\n\t\tisNumber( value.re ) &&\n\t\tisNumber( value.im )\n\t) {\n\t\treturn new Complex64( value.re, value.im );\n\t}\n\treturn value;\n}\n\n\n// EXPORTS //\n\nmodule.exports = reviveComplex64;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Revive a JSON-serialized 64-bit complex number.\n*\n* @module @stdlib/complex-reviver-float32\n*\n* @example\n* var parseJSON = require( '@stdlib/utils-parse-json' );\n* var reviveComplex64 = require( '@stdlib/complex-reviver-float32' );\n*\n* var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n*\n* var z = parseJSON( str, reviveComplex64 );\n* // returns <Complex64>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,yBAA0B,EAoBnD,SAASC,EAAiBC,EAAKC,EAAQ,CACtC,OACCA,GACAA,EAAM,MACNA,EAAM,OAAS,aACfJ,EAAUI,EAAM,EAAG,GACnBJ,EAAUI,EAAM,EAAG,EAEZ,IAAIH,EAAWG,EAAM,GAAIA,EAAM,EAAG,EAEnCA,CACR,CAKAL,EAAO,QAAUG,ICtBjB,IAAIG,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNumber", "Complex64", "reviveComplex64", "key", "value", "main"]
}
